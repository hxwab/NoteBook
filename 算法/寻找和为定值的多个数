package com.taop.marchtea;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.Stack;
import java.util.Vector;
/**
 * 
 * 输入两个整数n和sum，从数列1，2，3.......n 中随意取几个数，使其和等于sum，要求将其中所有的可能组合列出来。
 
 解法一： 取n与不取N
 注意到取n，和不取n个区别即可，考虑是否取第n个数的策略，可以转化为一个只和前n-1个数相关的问题。 
如果取第n个数，那么问题就转化为“取前n-1个数使得它们的和为sum-n”，对应的代码语句就是sumOfkNumber(sum - n, n - 1)； 
如果不取第n个数，那么问题就转化为“取前n-1个数使得他们的和为sum”，对应的代码语句为sumOfkNumber(sum, n - 1)。 

解法二：
这个问题属于子集和问题（也是背包问题）。本程序采用回溯法+剪枝，其中X数组是解向量，t=∑(1,..,k-1)Wi*Xi, r=∑(k,..,n)Wi，且 

若t+Wk+W(k+1)<=M,则Xk=true，递归左儿子(X1,X2,..,X(k-1),1)；否则剪枝； 
若t+r-Wk>=M && t+W(k+1)<=M,则置Xk=0，递归右儿子(X1,X2,..,X(k-1),0)；否则剪枝； 
本题中W数组就是(1,2,..,n),所以直接用k代替WK值。 


 * @author win7
 *
 */

public class SumOfKNumber {
	
	Vector<Integer> v = new Vector<Integer>();
	Set<Integer> set = new HashSet<Integer>();
	private  List<Integer> list = new ArrayList<Integer>();
	Stack<Integer> stack = new Stack<Integer>();
	public void getKNumber(int n , int sum){
		
		if(n<=0||sum<=0){
			if(!stack.isEmpty())
			stack.pop();
			return ;
		}
		
		stack.push(n);
		
		if(sum==n){
			Iterator<Integer> it = stack.iterator();
			while(it.hasNext()){
				System.out.print(it.next());
			}
			System.out.println("");
		}
		
		
		getKNumber(n-1, sum-n);
		getKNumber(n-1, sum);
		
	}
	
	
public void getKNumber1(int n , int sum){
		
		if(n<=0||sum<=0){
			if(!list.isEmpty())
			list.remove(list.size());
			return ;
		}
		
		list.add(n);
		
		
		if(sum==n){
			Iterator<Integer> it = list.iterator();
			while(it.hasNext()){
				System.out.print(it.next());
			}
			System.out.println("");
		}
		
		
		getKNumber(n-1, sum-n);
		getKNumber(n-1, sum);
		
	}
	

}
